import pandas as pd
import json
from collections import defaultdict

# Load the data from Excel
excel_path = "C:\\Users\\acer\\Downloads\\test.xlsx"
df = pd.read_excel(excel_path, skiprows=1)

# Function to create the nested JSON structure
def create_nested_dict(df):
    nested_dict = defaultdict(dict)
    
    for _, row in df.iterrows():
        resource_group_name = row['resourceGroupName']
        
        # Populate the nested dictionary structure based on provided attributes
        nested_dict[resource_group_name] = {
            "instance-type": row['instance-type'],
            "instance-creation": {
                "name-label": row['name-label'],
                "requestorID": row['requestorID'],
                "requestorEmail": row['requestorEmail'],
                "locationCode": row['locationCode'],
                "billingCode": row['billingCode'],
                "codeTypeName": row['codeTypeName'],
                "service": row['service'],
                "osVersionName": row['osVersionName'],
                "osImageType": row['osImageType'],
                "machineType": row['machineType'],
                "zone": row['zone'],
                "additional-disks": [
                    {
                        "additionalDiskName": row['additional-disks.additionalDiskName'],
                        "additionalDiskSize": row['additional-disks.additionalDiskSize'],
                        "additionalDiskType": row['additional-disks.additionalDiskType'],
                        "additionalDiskLun": row['additional-disks.additionalDiskLun']
                    }
                ]
            },
            "network-tags": [],
            "windows-only": {
                "owner": row['windows-only.owner'],
                "approvers": [row['windows-only.approver1'], row['windows-only.approver2']],
                "BusinessUnit": row['windows-only.BusinessUnit'],
                "SupportEntity": row['windows-only.SupportEntity']
            },
            "linux-only": {
                "centrify": row['linux-only.centrify']
            },
            "network-optional": {
                "vnetName": row['network-optional.vnetName'],
                "vnetResourceGroupName": row['network-optional.vnetResourceGroupName'],
                "subnetName": row['network-optional.subnetName'],
                "ipAddress": row['network-optional.ipAddress'],
                "proxyServer": row['network-optional.proxyServer'],
                "proxyPort": row['network-optional.proxyPort']
            },
            "instance-deletion": {
                "demise": row['demise'],
                "crNumber": row['crNumber']
            }
        }
    
    return nested_dict

# Create the nested dictionary
nested_data = create_nested_dict(df)

# Convert to JSON
nested_json = json.dumps(nested_data, indent=4)
print(nested_json)

# Save JSON to file
output_path = "C:\\Users\\acer\\Downloads\\test.json"
with open(output_path, 'w') as json_file:
    json_file.write(nested_json)
