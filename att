import pandas as pd
import json
from collections import defaultdict

# Load the data from Excel
excel_path = "C:\\Users\\45270978\\Desktop\\try\\NewPetVmOrderTemplate.xlsx"
data = pd.read_excel(excel_path, skiprows=1)

# Clean and preprocess the data as per your current code
data_cleaned = data[data['Attribute'].notna() & (data['Attribute'].str.strip() != '')]
data_cleaned = data_cleaned.drop(columns='Example', errors='ignore')
data_cleaned = data_cleaned.dropna(axis=1, how='all')
data_cleaned = data_cleaned.replace({pd.NA: ''})

# Function to create a nested dictionary from the cleaned DataFrame row
def create_nested_dict(row):
    return {
        "instance-type": row.get('instance-type', ''),
        "instance-creation": {
            "name-label": row.get('name-label', ''),
            "requestorID": row.get('requestorID', ''),
            "requestorEmail": row.get('requestorEmail', ''),
            "locationCode": row.get('locationCode', ''),
            "billingCode": row.get('billingCode', ''),
            "codeTypeName": row.get('codeTypeName', ''),
            "service": row.get('service', ''),
            "osVersionName": row.get('osVersionName', ''),
            "osImageType": row.get('osImageType', ''),
            "machineType": row.get('machineType', ''),
            "zone": row.get('zone', ''),
            "additional-disks": [
                {
                    "additionalDiskName": row.get('additional-disks.additionalDiskName', ''),
                    "additionalDiskSize": row.get('additional-disks.additionalDiskSize', ''),
                    "additionalDiskType": row.get('additional-disks.additionalDiskType', ''),
                    "additionalDiskLun": row.get('additional-disks.additionalDiskLun', '')
                }
            ]
        },
        "network-tags": [],
        "windows-only": {
            "owner": row.get('windows-only.owner', ''),
            "approvers": [
                row.get('windows-only.approver1', ''), 
                row.get('windows-only.approver2', '')
            ],
            "BusinessUnit": row.get('windows-only.BusinessUnit', ''),
            "SupportEntity": row.get('windows-only.SupportEntity', '')
        },
        "linux-only": {
            "centrify": row.get('linux-only.centrify', '')
        },
        "network-optional": {
            "vnetName": row.get('network-optional.vnetName', ''),
            "vnetResourceGroupName": row.get('network-optional.vnetResourceGroupName', ''),
            "subnetName": row.get('network-optional.subnetName', ''),
            "ipAddress": row.get('network-optional.ipAddress', ''),
            "proxyServer": row.get('network-optional.proxyServer', ''),
            "proxyPort": row.get('network-optional.proxyPort', '')
        },
        "instance-deletion": {
            "demise": row.get('demise', ''),
            "crNumber": row.get('crNumber', '')
        }
    }

# Iterate over rows to create nested JSON files as per the current logic
i = data_cleaned.shape[1]
for idx in range(1, i):
    row_dict = dict(zip(data_cleaned.iloc[:, 0], data_cleaned.iloc[:, idx]))
    nested_dict = create_nested_dict(row_dict)
    
    # Save each nested JSON to a file
    output_path = f"C:\\Users\\45270978\\Desktop\\try\\testing_file_created_{idx}.json"
    with open(output_path, 'w') as json_file:
        json.dump(nested_dict, json_file, indent=4)
